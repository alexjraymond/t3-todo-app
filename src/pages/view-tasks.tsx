// import "@fontsource/montserrat/400.css";
import React, { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import {
  ChakraProvider,
  List,
  Heading,
  ListIcon,
  ListItem,
  VStack,
  Text,
  Checkbox,
  Box,
  useColorModeValue,
  Container,
  HStack,
  Spacer,
  Button,
  Flex,
  IconButton,
} from "@chakra-ui/react";

import { MdSettings, MdCheckCircle } from "react-icons/md";
import { FaSeedling } from "react-icons/fa";
import { ImCheckboxUnchecked } from "react-icons/im";
import { FcCalendar, FcGenericSortingDesc } from "react-icons/fc";
import { RiListSettingsLine } from "react-icons/ri";
import NavBar from "./NavBar";
import { api } from "~/utils/api";
import theme from "./theme";
import {
  ArrowDownIcon,
  CalendarIcon,
  DeleteIcon,
  Icon,
} from "@chakra-ui/icons";

interface Task {
  id: number;
  task: string;
  description: string;
  type: string;
  date: string;
}

interface Props {
  tasks: Task[];
}

const ViewTasks: NextPage = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [selectedTaskId, setSelectedTaskId] = useState<number | null>(null);
  const { data: tasksData } = api.tasks.getTasks.useQuery();
  console.log(tasksData);

  useEffect(() => {
    if (tasksData) {
      setTasks(tasksData);
    }
  }, [tasksData]);

  return (
    <>
      <Head>
        <title>View Tasks</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ChakraProvider theme={theme}>
        <NavBar />
        <main className="flex min-h-screen flex-col items-center justify-center gap-8 ">
          <Container maxW="container.lg" p={4}>
            <ViewTasksHeader />
            <List spacing={0}>
              <IndividualTask {...{ tasks }} />
            </List>
          </Container>
        </main>
      </ChakraProvider>
    </>
  );
};

export default ViewTasks;

const IndividualTask: React.FC<Props> = ({ tasks }) => {
  console.log(tasks);
  const bg = useColorModeValue("white", "gray.700");
  const borderColor = useColorModeValue("gray.300", "gray.600");
  const hoverBg = useColorModeValue("gray.50", "gray.600");
  const noteColor = useColorModeValue("gray.500", "gray.400");

  return (
    <VStack align="start" spacing={0} width="100%">
      {tasks.map((task, index) => (
        <Box
          key={task.id}
          p={4}
          bg={bg}
          borderTopWidth={index === 0 ? 1 : 0}
          borderBottomWidth={1}
          borderColor={borderColor}
          width="100%"
          _hover={{ bg: hoverBg }}
          position="relative"
          cursor="pointer"
          // onClick={expandedTask}
        >
          <Checkbox colorScheme="blue" mb={2} isTruncated>
            {task.task}
          </Checkbox>
          <Text color={noteColor} fontSize="sm" maxW={"calc(100% - 100px)"}>
            {truncateText(task.description, 120)}
          </Text>
          <DeleteIcon
            position="absolute"
            top={4}
            right={4}
            color={noteColor}
            boxSize={4}
            cursor="pointer"
            _hover={{ color: "red.500" }}
          />
          <HStack position="absolute" bottom={4} right={4} spacing={2}>
            <Spacer />
            <HStack>
              <CalendarIcon as={FcCalendar} />
              <Text fontSize="xs">apr. 2</Text>
            </HStack>
            <Box
              bg={
                task.type === "work"
                  ? "blue.300"
                  : task.type === "personal"
                  ? "red.300"
                  : "green.300"
              } // Customize the background color based on the task type
              borderRadius="md"
              px={2}
              py={1}
              fontSize="xs"
              color="white"
            >
              {task.type}
            </Box>
          </HStack>
        </Box>
      ))}
    </VStack>
  );
};

const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) {
    return text;
  }
  return text.slice(0, maxLength) + "...";
};

const ViewTasksHeader = () => {
  return (
    <Flex justifyContent="space-between" alignItems="center" mb={4}>
      <Heading as="h1" noOfLines={1}>
        Tasks
      </Heading>
      <VStack spacing={2} alignItems="flex-end">
        <Button colorScheme="blue" size="sm">
          <Icon as={RiListSettingsLine}></Icon>
        </Button>
      </VStack>
    </Flex>
  );
};
