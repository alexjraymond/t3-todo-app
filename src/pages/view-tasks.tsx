// import "@fontsource/montserrat/400.css";
import React, { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import {
  ChakraProvider,
  List,
  Heading,
  VStack,
  Text,
  Checkbox,
  Box,
  useColorModeValue,
  Container,
  HStack,
  Spacer,
  Button,
  Flex,
  useDisclosure,
} from "@chakra-ui/react";

import { FcCalendar } from "react-icons/fc";
import { RiListSettingsLine } from "react-icons/ri";
import NavBar from "./NavBar";
import { api } from "~/utils/api";
import theme from "./theme";
import { CalendarIcon, DeleteIcon, Icon } from "@chakra-ui/icons";
import dateFormat from "dateformat";
import CreateTaskModal from "./CreateTaskModal";

interface Task {
  id: string;
  task: string;
  description: string;
  type: string;
  date: string;
}

interface Props {
  tasks: Task[];
}

const ViewTasks: NextPage = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const { data: tasksData } = api.tasks.getTasks.useQuery();
  console.log(tasksData);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const handleOpenModal = () => {
    setIsModalOpen(true);
  };
  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleSaveTask = (task: string) => {
    console.log("Task saved:", task);
  };

  useEffect(() => {
    if (tasksData) {
      setTasks(tasksData);
    }
  }, [tasksData]);

  return (
    <>
      <Head>
        <title>View Tasks</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ChakraProvider theme={theme}>
        <NavBar />
        <main className="flex min-h-screen flex-col items-center justify-center gap-8 ">
          <Container maxW="container.lg" p={4}>
            <ViewTasksHeader />
            <List spacing={0}>
              <IndividualTask {...{ tasks }} />
            </List>
            <NewTaskButton handleSaveTask={handleSaveTask} />
          </Container>
        </main>
      </ChakraProvider>
    </>
  );
};

export default ViewTasks;

const IndividualTask: React.FC<Props> = ({ tasks }) => {
  const bg = useColorModeValue("white", "gray.700");
  const borderColor = useColorModeValue("gray.300", "gray.600");
  const hoverBg = useColorModeValue("gray.50", "gray.600");
  const noteColor = useColorModeValue("gray.500", "gray.400");
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);

  return (
    <VStack align="start" spacing={0} width="100%">
      {tasks.map((task, index) => {
        const date = new Date(task.date);
        const formattedDate = dateFormat(date, "mmm. d");

        return (
          <Box
            key={task.id}
            p={4}
            bg={bg}
            borderTopWidth={index === 0 ? 1 : 0}
            borderBottomWidth={1}
            borderColor={borderColor}
            width="100%"
            _hover={{ bg: hoverBg }}
            position="relative"
            cursor="pointer"
            onClick={() => setSelectedTask(task)}
          >
            <Checkbox colorScheme="blue" mb={2} isTruncated>
              {task.task}
            </Checkbox>
            <Text color={noteColor} fontSize="sm" maxW={"calc(100% - 100px)"}>
              {truncateText(task.description, 120)}
            </Text>
            <DeleteIcon
              position="absolute"
              top={4}
              right={4}
              color={noteColor}
              boxSize={4}
              cursor="pointer"
              _hover={{ color: "red.500" }}
            />
            <HStack position="absolute" bottom={4} right={4} spacing={2}>
              <Spacer />
              <HStack>
                <CalendarIcon as={FcCalendar} />
                <Text fontSize="xs">{formattedDate}</Text>
              </HStack>
              <Box
                bg={
                  task.type === "work"
                    ? "blue.300"
                    : task.type === "personal"
                    ? "red.300"
                    : "green.300"
                }
                borderRadius="md"
                px={2}
                py={1}
                fontSize="xs"
                color="white"
              >
                {task.type}
              </Box>
            </HStack>
          </Box>
        );
      })}
      {selectedTask && (
        <Box
          position="fixed"
          top={0}
          left={0}
          width="100vw"
          height="100vh"
          bg="rgba(0, 0, 0, 0.5)"
          display="flex"
          alignItems="center"
          justifyContent="center"
          zIndex={10}
          onClick={() => setSelectedTask(null)}
        >
          <Box
            bg="white"
            p={4}
            borderRadius="md"
            boxShadow="md"
            maxWidth="90vw"
            maxHeight="90vh"
            overflow="auto"
          >
            <Heading as="h2" size="md" mb={4}>
              {selectedTask.task}
            </Heading>
            <Text mb={4}>{selectedTask.description}</Text>
            {/* ... */}
          </Box>
        </Box>
      )}
    </VStack>
  );
};

const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) {
    return text;
  }
  return text.slice(0, maxLength) + "...";
};

const ViewTasksHeader = () => {
  return (
    <Flex justifyContent="space-between" alignItems="center" mb={4}>
      <Heading as="h1" noOfLines={1}>
        Tasks
      </Heading>
      <VStack spacing={2} alignItems="flex-end">
        <Button colorScheme="blue" size="sm">
          <Icon as={RiListSettingsLine}></Icon>
        </Button>
      </VStack>
    </Flex>
  );
};

const NewTaskButton = (handleSaveTask) => {
  const { isOpen, onOpen, onClose } = useDisclosure();

  return (
    <div className="grid">
      <Button className="mt-2 flex justify-end" onClick={onOpen}>
        Add Task
      </Button>
      <CreateTaskModal
        isOpen={isOpen}
        onClose={onClose}
        onSave={handleSaveTask}
      />
    </div>
  );
};
